{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEAD,EAAAE,OAAOC,KAAK,CACVC,MAAO,QACPC,SAAU,YAEVC,SAAU,OACVC,QAAS,MAGIC,SAASC,cAAc,SAC/BC,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAEC,iBACF,IAA4CC,EAiB9C,SAA2BF,GACzB,IAAIG,EAAO,GAKX,OAJiB,IAAIC,SAASJ,EAAEK,eACvBC,SAAQ,SAACC,EAAOC,GACvBL,EAAKK,GAAQC,OAAOF,E,IAEfJ,C,CAvBqCO,CAAkBV,GAAtDW,EAAoCT,EAApCU,MAAmBC,EAAiBX,EAAjBW,KAAMC,EAAWZ,EAAXY,OAE7BC,EAAQJ,EAEZ,IAAKK,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EACjDC,EAAcD,EAAUD,GACrBG,MAAK,SAAAC,G,IAAGC,EAAQD,EAARzB,SAAUkB,EAAKO,EAALP,MACjBvB,EAAAE,OAAO8B,QAAQ,uBAAwCC,OAAfF,EAAS,QAAYE,OAANV,EAAM,M,IAE9DW,OAAM,SAAAJ,G,IAAGK,EAAQL,EAARzB,SAAUkB,EAAKO,EAALP,MAClBvB,EAAAE,OAAOkC,QAAQ,sBAAqCH,OAAfE,EAAS,QAAYF,OAANV,EAAM,M,IAG9DG,GAASF,C,IAjBb,IAAIG,EAAW,EA8Bf,SAASC,EAAcS,EAAUd,GAC/B,OAAO,IAAIe,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAElC,SAAAgC,EAAUd,UAEpBiB,EAAO,CAAEnC,SAAAgC,EAAUd,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({\n  width: '300px',\n  position: 'right-top',\n\n  fontSize: '16px',\n  timeout: 5000,\n});\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\nlet position = 1;\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const { delay: firstDelay, step, amount } = getValuesFromForm(e);\n\n  let delay = firstDelay;\n\n  for (position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n  }\n}\n\nfunction getValuesFromForm(e) {\n  let data = {};\n  const formData = new FormData(e.currentTarget);\n  formData.forEach((value, name) => {\n    data[name] = Number(value);\n  });\n  return data;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","Notify","init","width","position","fontSize","timeout","document","querySelector","addEventListener","e","preventDefault","ref","data","FormData","currentTarget","forEach","value","name","Number","$ce04d3a99e08e73b$var$getValuesFromForm","firstDelay","delay","step","amount","delay1","$ce04d3a99e08e73b$var$position","$ce04d3a99e08e73b$var$createPromise","then","param","position1","success","concat","catch","position2","failure","position3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.013d9700.js.map"}